@using Rundenwettkampf.Models
@inject Services.PersonService PersonService
@page "/person"

<h1>Schützen</h1>
<h2>Neuen Schützen anlegen</h2>
<form>
	<input type="number" @bind="addingCount" placeholder="Wie viele Zeilen?" required />
	<button @onclick="addNewRows" >Speichern</button>
</form>

<h2>Gespeicherte Schützen</h2>
<table>
	<tr>
		<th>Startnummer</th>
		<th>Geschlecht</th>
		<th>Behinderung</th>
		<th>Vorname</th>
		<th>Nachname</th>
		<th>Geburtstag</th>
		<th>Aktionen</th>
	</tr>
	@foreach (var person in PersonService.GetAll())
	{
		@if(editStartNo == person.StartNo)
		{
			<tr>
				<td>@person.StartNo</td>
				<td><input type="text" @bind="editPerson.Gender" required /></td>
				<td><input type="text" @bind="editPerson.Handicap" required /></td>
				<td><input type="text" @bind="editPerson.FirstName" required /></td>
				<td><input type="text" @bind="editPerson.LastName" required /></td>
				<td><input type="date" @bind="editPerson.BirthDate" required /></td>
				<td>
					<button @onclick="() => UpdatePerson(editPerson)">Speichern</button>
					<button @onclick="() => StopEditing()">Abbrechen</button>
				</td>
			</tr>
		} else
		{	
			<tr>
				<td>@person.StartNo</td>
				<td>@person.Gender</td>
				<td>@person.Handicap</td>
				<td>@person.FirstName</td>
				<td>@person.LastName</td>
				<td>
					@if (person.BirthDate.Year <= 1900)
					{
						<p>-</p>
					} else
					{
						@person.BirthDate.ToShortDateString()
					}
				</td>
				<td>
					<button @onclick="() => EditPerson(person.StartNo)">Editieren</button>
					<button @onclick="() => DeletePerson(person.Id)">Löschen</button>

				</td>
			</tr>
		}
	}
</table>
@code {
	private List<Person> people = new();
	private int editStartNo = 0;
	private Person editPerson = new();
	private Person person1 = new();
	private int addingCount = 0;

	protected override async Task OnInitializedAsync()
	{
		people = PersonService.GetAll();
	}

	private void addNewRows()
	{
		for(int i = 0; i < addingCount; i++)
		{
			Person person = new();
			person.StartNo = people.Count + i + 1;
			person.Gender = "-";
			person.Handicap = "-";
			person.FirstName = "-";
			person.LastName = "-";
			PersonService.Add(person);
		}
		people = PersonService.GetAll();
	}

	private void SavePerson(Person person)
	{
		if (person.Handicap == null)
		{
			person.Handicap = "-";
		}
		PersonService.Add(person);
		people = PersonService.GetAll();
	}

	private void DeletePerson(int id)
	{
		PersonService.Delete(id);
		people = PersonService.GetAll();
	}

	private void StopEditing()
	{
		editStartNo = 0;
		editPerson = new();
		people = PersonService.GetAll();
	}

	private void UpdatePerson(Person person)
	{
		Person original = PersonService.GetByStartNo(person.StartNo);
		original.Gender = person.Gender;
		original.Handicap = person.Handicap;
		original.FirstName = person.FirstName;
		original.LastName = person.LastName;
		original.BirthDate = person.BirthDate;
		PersonService.Update(original);
		editStartNo = 0;
		editPerson = new();
		people = PersonService.GetAll();
	}

	private void EditPerson(int startNo)
	{
		editStartNo = startNo;
		Person original = PersonService.GetByStartNo(startNo);
		editPerson = new Person
		{
			Id = original.Id,
			StartNo = original.StartNo,
			Gender = original.Gender,
			Handicap = original.Handicap,
			FirstName = original.FirstName,
			LastName = original.LastName,
			BirthDate = original.BirthDate
		};
	}
}
